/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.stockswag.GUI;


import com.mycompany.stockswag.StockManager.Stock;
import com.mycompany.stockswag.StockSwag;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author EliAir
 */
public class StockSwagGUI extends javax.swing.JFrame {
    private StockSwag stockSwag;
    private List<String> stocksymbols;
    private List<Stock> stocks;
    /**
     * Creates new form StockSwagGUI
     */
    public StockSwagGUI(StockSwag stockSwag) {
        initComponents();
        this.stockSwag = stockSwag;
        this.stocksymbols = new ArrayList<String>();
        this.stocks = new ArrayList<Stock>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        SelectedStocksPanel = new javax.swing.JPanel();
        AddField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        StockListPane = new javax.swing.JScrollPane();
        StockList = new javax.swing.JList();
        loadStocksButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        PortfolioPane = new javax.swing.JScrollPane();
        PortfolioTable = new javax.swing.JTable();
        StatusPane = new javax.swing.JScrollPane();
        StatusScreen = new javax.swing.JTextArea();
        copyRightField = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        SearchStocksButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton3 = new javax.swing.JButton();
        StockAnalysisPane = new javax.swing.JScrollPane();
        StockAnalysisArea = new javax.swing.JTextArea();
        AnalyzeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        openStocksMenuItem = new javax.swing.JMenuItem();
        openHistoricalDataMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StockSwag");

        SelectedStocksPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Stocks"));
        SelectedStocksPanel.setToolTipText("Selected Stocks");

        AddField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFieldActionPerformed(evt);
            }
        });

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        StockList.setModel(new DefaultListModel());
        StockListPane.setViewportView(StockList);

        org.jdesktop.layout.GroupLayout SelectedStocksPanelLayout = new org.jdesktop.layout.GroupLayout(SelectedStocksPanel);
        SelectedStocksPanel.setLayout(SelectedStocksPanelLayout);
        SelectedStocksPanelLayout.setHorizontalGroup(
            SelectedStocksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SelectedStocksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(SelectedStocksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SelectedStocksPanelLayout.createSequentialGroup()
                        .add(AddField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(AddButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(StockListPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SelectedStocksPanelLayout.setVerticalGroup(
            SelectedStocksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SelectedStocksPanelLayout.createSequentialGroup()
                .add(StockListPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(SelectedStocksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AddField)
                    .add(AddButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11))
        );

        loadStocksButton.setText("Load Stocks");
        loadStocksButton.setPreferredSize(new java.awt.Dimension(0, 0));
        loadStocksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStocksButtonActionPerformed(evt);
            }
        });

        ResetButton.setText("Reset");
        ResetButton.setPreferredSize(new java.awt.Dimension(0, 0));
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        PortfolioTable.setFocusable(false);
        PortfolioTable.setRequestFocusEnabled(false);
        PortfolioTable.setRowSelectionAllowed(false);
        PortfolioPane.setViewportView(PortfolioTable);

        StatusScreen.setColumns(20);
        StatusScreen.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        StatusScreen.setRows(5);
        StatusScreen.setText("Write stock ticker symbols on the left, for example: TSLA, YHOO, MSFT, NOK, AAPL \n");
        StatusPane.setViewportView(StatusScreen);

        copyRightField.setEditable(false);
        copyRightField.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        copyRightField.setForeground(new java.awt.Color(1, 1, 1));
        copyRightField.setText("Copyright ELN 2013");
        copyRightField.setBorder(null);

        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(1000, 25));

        SearchStocksButton.setText("Search Stocks");
        SearchStocksButton.setFocusable(false);
        SearchStocksButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SearchStocksButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SearchStocksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchStocksButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SearchStocksButton);
        jToolBar1.add(jSeparator1);

        jButton4.setText("jButton4");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);
        jToolBar1.add(jSeparator2);

        jButton2.setText("jButton2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator3);

        jButton3.setText("jButton3");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton3);

        StockAnalysisArea.setColumns(20);
        StockAnalysisArea.setRows(5);
        StockAnalysisArea.setText("Tähän historiallista dataa ylemmäst taulukosta valitusta yksittäisestä osakkeesta. \nDatan hakeminen vahvistetaan käyttäjän toimesta. Hintakehitys, CAPM, Beta laskelmat.\n\nTulossa myös portfolioanalyysi:\n- käyttäjä määrittelee osakkeiden painon (%) portfoliossa \n- tämän perusteella voidaan laskea portfolion riskiä, tuottovaatimusta kunhan \n   ensin lasketaan yksittäisten osakkeiden tuottavaatimus(CAPM) ja Beta.");
        StockAnalysisPane.setViewportView(StockAnalysisArea);

        AnalyzeButton.setText("Analyze");
        AnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzeButtonActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        openStocksMenuItem.setText("Open Stocks");
        openStocksMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openStocksMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(openStocksMenuItem);

        openHistoricalDataMenuItem.setText("Open Historical Data");
        openHistoricalDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openHistoricalDataMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(openHistoricalDataMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 733, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(loadStocksButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(AnalyzeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(copyRightField)
                                    .add(SelectedStocksPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(26, 26, 26))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(55, 55, 55)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(StatusPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 643, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(PortfolioPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                            .add(StockAnalysisPane))))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(PortfolioPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(14, 14, 14)
                        .add(StockAnalysisPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(SelectedStocksPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(loadStocksButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AnalyzeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 107, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(51, 51, 51)
                        .add(copyRightField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(StatusPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        // TODO add your handling code here:
        this.stockSwag.clearStocks();
        this.stocksymbols.clear();
        this.StatusScreen.setText("");
        this.StatusScreen.setText("Write stock ticker symbols on the left, for example: TSLA, YHOO, MSFT, NOK, AAPL \n");
        this.StockAnalysisArea.setText("Tähän historiallista dataa ylemmäst taulukosta valitusta yksittäisestä osakkeesta. \nDatan hakeminen vahvistetaan käyttäjän toimesta. Hintakehitys, CAPM, Beta laskelmat.\n\nTulossa myös portfolioanalyysi:\n- käyttäjä määrittelee osakkeiden painon (%) portfoliossa \n- tämän perusteella voidaan laskea portfolion riskiä, tuottovaatimusta kunhan \n   ensin lasketaan yksittäisten osakkeiden tuottavaatimus(CAPM) ja Beta.");
        DefaultListModel listmodel = (DefaultListModel) this.StockList.getModel();
        listmodel.clear();        
        PortfolioTableDataModel pt = new PortfolioTableDataModel(0);
        this.PortfolioTable.setModel(pt);
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void AddFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFieldActionPerformed
        // TODO add your handling code here:        
        AddButtonActionPerformed(evt);
        this.AddField.setText("");
    }//GEN-LAST:event_AddFieldActionPerformed

    private void loadStocksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadStocksButtonActionPerformed
        // TODO add your handling code here:        
        if(this.stockSwag.listTickers(this.stocksymbols) == true){
            this.StatusScreen.append("Fetching stock data!\n");
            this.stockSwag.downloadStocks();
            openPortfolioInJTable();
            
        } else {
            this.StatusScreen.append("False ticker symbol, try again!\n");
        }
        
        
    }//GEN-LAST:event_loadStocksButtonActionPerformed

    private void SearchStocksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchStocksButtonActionPerformed
        // TODO add your handling code here:
        createStockSearcherFrame();
    }//GEN-LAST:event_SearchStocksButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        String s = this.AddField.getText();
        DefaultListModel listmodel = (DefaultListModel) this.StockList.getModel();
        listmodel.addElement(s);
        this.stocksymbols.add(s);
        this.AddField.setText("");
        
    }//GEN-LAST:event_AddButtonActionPerformed

    private void AnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzeButtonActionPerformed
        // TODO add your handling code here:
        this.stockSwag.downloadHistoricalData();
        setListenerToJTableAfterAnalysis();
        
    }//GEN-LAST:event_AnalyzeButtonActionPerformed

    private void openStocksMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openStocksMenuItemActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        //In response to a button click:
        int returnVal = fc.showOpenDialog(StockSwagGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            System.out.println("Loading stocks from file: " + file);
            this.stockSwag.loadStocksFromFile(file);
            openPortfolioInJTable();
            } 
        
    }//GEN-LAST:event_openStocksMenuItemActionPerformed

    private void openHistoricalDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openHistoricalDataMenuItemActionPerformed
        // TODO add your handling code here:
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        //In response to a button click:
        int returnVal = fc.showOpenDialog(StockSwagGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            System.out.println("Loading historical data from files: " + files);
            this.stockSwag.loadHistoricalDataFromFiles(files);
            setListenerToJTableAfterAnalysis();
            
            } 
    }//GEN-LAST:event_openHistoricalDataMenuItemActionPerformed

    public void createStockSearcherFrame()
    {
        SwingUtilities.invokeLater(new Runnable()        
        {
            @Override
            public void run()
            {
                new StockSearcher().setVisible(true);
            }
        });
    }
    
    public void openPortfolioInJTable(){
        this.stocks = this.stockSwag.getStocks();          
            PortfolioTableDataModel pt = new PortfolioTableDataModel(stocks.size());
            int i = 0;
            for (Stock s : this.stocks) {
                pt.setValueAt(s.getName(), i, 0);
                pt.setValueAt(s.getSymbol(), i, 1);
                pt.setValueAt(s.getClosePrice(), i, 2);
                pt.setValueAt(s.getPe(), i, 3);
                pt.setValueAt(s.getEps(), i, 4);
                pt.setValueAt(s.getPs(), i, 5);
                pt.setValueAt(s.getPb(), i, 6);
                i++;
            }
            this.PortfolioTable.setModel(pt);
    }
    
    public void setListenerToJTableAfterAnalysis(){
        this.PortfolioTable.getSelectionModel().addListSelectionListener(
                new ListSelectionListener(){
                    public void valueChanged(ListSelectionEvent e) {
                        int selectedRow = PortfolioTable.getSelectedRow();
                        System.out.println("selected row: " +selectedRow);
                        System.out.println(stocks.get(selectedRow).getHistoricalData().get(0)[0]);
                        System.out.println(stocks.get(selectedRow).getHistoricalData().get(0)[1]);
                        System.out.println(stocks.get(selectedRow).getHistoricalData().get(1)[1]);
                        System.out.println(stocks.get(selectedRow).getHistoricalData().get(2)[1]);
                        System.out.println(stocks.get(selectedRow));
                        StockAnalysisArea.setText(stocks.get(selectedRow).getHistoricalData().get(0)[0] + stocks.get(selectedRow).getHistoricalData().get(0)[1]);
                    }
                    
                });
    }
        
        
                
            
            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTextField AddField;
    private javax.swing.JButton AnalyzeButton;
    private javax.swing.JScrollPane PortfolioPane;
    private javax.swing.JTable PortfolioTable;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton SearchStocksButton;
    private javax.swing.JPanel SelectedStocksPanel;
    private javax.swing.JScrollPane StatusPane;
    private javax.swing.JTextArea StatusScreen;
    private javax.swing.JTextArea StockAnalysisArea;
    private javax.swing.JScrollPane StockAnalysisPane;
    private javax.swing.JList StockList;
    private javax.swing.JScrollPane StockListPane;
    private javax.swing.JTextField copyRightField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadStocksButton;
    private javax.swing.JMenuItem openHistoricalDataMenuItem;
    private javax.swing.JMenuItem openStocksMenuItem;
    // End of variables declaration//GEN-END:variables
}
